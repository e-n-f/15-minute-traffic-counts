#!/usr/bin/perl

while (<>) {
	chomp;
	push @lines, $_;
}


for ($i = 0; $i <= $#lines; $i++) {
	#if ($lines[$i] =~ /2 *4 *H *r *\( *e *s *t *i *m *a *t *e *\)/) {
	if ($lines[$i] =~ /H *O *U *R *T *O *T *A *L */) {
		$l = $lines[$i];
		$l =~ s/^(.*H *O *U *R *T *O *T *A *L *)//;
		#$l =~ s/^(.*2 *4 *H *r *\( *e *s *t *i *m *a *t *e *\) *)//;
		$x = length($1);

		while ($l =~ s/([0-9#]+ *)//) {
			# print "onto est, $x\n";
			push @est, $x;
			$x += length($1);
			push @val, $1;
			$val[$#val] =~ s/ *//g;
		}

		last;
	}
}

LINE:
for ($i = 0; $i <= $#lines; $i++) {
	if (($lines[$i] =~ s/^(.*[^0-9]([0-9]+):([0-9][0-9]) +)// && ($mode = 1)) ||
	    ($lines[$i] =~ /Left *Thru/ && ($mode = 2))) {
		$when = $2 * 60 + $3 + $pm;
		if ($when < $owhen) {
			$pm = 12 * 60;
			$when += $pm;
		}
		$owhen = $when;

		if ($mode == 1) {
			$x = length($1);
		} else {
			$lines[$i] =~ s/^( *)//;
			$x = length($1);
		}
		@rec = split(/ +/, $lines[$i]);

		if ($#rec == $#est && $mode == 1) {
			for ($i = 0; $i <= $#rec; $i++) {
				$field{$when}[$i] = $rec[$i];
			}
		} else {
			# print "starting at $x and " . length($lines[$i]) . "\n";
			for ($a = 0; $a <= $#rec; $a++) {
				$lines[$i] =~ s/([^ ]+ *)//;
				$nextx = $x + length($1);
				# print "consumed " . length($1) . " with $1 \n";

				$best = -1;
				$bestd = 99999;
				for ($j = 0; $j <= $#est; $j++) {
					$d = abs($x + length($rec[$a]) - ($est[$j] + length($val[$a])));
					if ($d < $bestd) {
						$bestd = $d;
						$best = $j;
					}
				}

				if ($mode == 2) {
					# print "for $x $rec[$a], $est[$best] looks good\n";
				}

				if ($field{$when}[$best] ne "" && $mode == 1) {
					if ($best > 0 && $field{$when}[$best - 1] eq "") {
						$field{$when}[$best - 1] = $field{$when}[$best];
						$field{$when}[$best] = "";
					} else {
						delete $field{$when};
						print STDERR "$ARGV:" . ($i + 1) . " dup entry for column $best\n";
						next LINE;
					}
				}
				if ($best < 0) {
					delete $field{$when};
					print STDERR "$ARGV:" . ($i + 1) . " couldn't find anything for $val[$a]\n";
					next LINE;
				}

				$field{$when}[$best] = $rec[$a];

				$x = $nextx;
			}
		}
	}
}

if ($#est == 26) {
	for ($i = 0; $i <= $#lines; $i++) {
		if ($lines[$i] =~ /(\d+\/\d+\/\d+) *(.*)/) {
			$date = $1;
			$name = $2;

			$name =~ s/,/ /g;
			$name =~ s/ +/ /g;
			last;
		}
	}

	for $when (sort {$a <=> $b} (keys(%field))) {
		$fname = $ARGV;
		$fname =~ s/,/ /g;

		if ($when == 0) {
			print "file,name,id,date,time,";
		} else {
			print "$fname,$name,x,$date,";
			printf("%02d:%02d-%02d:%02d,", $when / 60, $when % 60,
				($when + 15) / 60, ($when + 15) % 60);
		}

		#            23
		#          8 7 6
		#
		#      12           20
		#  11  13           19  5
		#      14           18
		#
		#          0 1 2
		#            17

		#  0 1 2    5   6 7 8   11   12 13 14    17    18 19 20    23

		print "$field{$when}[8],$field{$when}[7],$field{$when}[6],";
		print "$field{$when}[20],$field{$when}[19],$field{$when}[18],";
		print "$field{$when}[2],$field{$when}[1],$field{$when}[0],";
		print "$field{$when}[14],$field{$when}[13],$field{$when}[12],";

		# Pedestrian counts are *parallel* to the traffic, not crossing it

		print "$field{$when}[23],";
		print "$field{$when}[5],";
		print "$field{$when}[17],";
		print "$field{$when}[11],";

		print ",,,,";

		print "\n";
	}
} elsif (0) {
	$lines[0] =~ s/  */ /g;
	print "$ARGV $lines[0]\n";

	for $when (sort {$a <=> $b} (keys(%field))) {
		print "$when\t";
		for ($i = 0; $i <= $#est; $i++) {
			print "$field{$when}[$i]\t";
		}
		print "\n";
	}
	print "\t";
	for ($i = 0; $i <= $#est; $i++) {
		print "$val[$i]\t";
	}
	print "\n";
}
